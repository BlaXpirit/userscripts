// ==UserScript==
// @name         Hexcells levels clipper
// @description  Copy Hexcells levels to clipboard
// @version      1
// @include      https://www.reddit.com/r/hexcellslevels/*
// @grant        GM_setClipboard
// @require      https://code.jquery.com/jquery-3.1.1.min.js
// @run-at       document-end
// @author       Oleh Prypin
// @namespace    http://blaxpirit.com/
// ==/UserScript==
// Generated by LiveScript 1.5.0
var $, copy, join$ = [].join;
$ = jQuery;
$('pre').parent().each(function(){
  var parent, levels, i$, len$, ref$, chk, level;
  parent = $(this);
  levels = [];
  parent.children('pre').each(function(){
    var block, container;
    block = $(this);
    container = $('<div>');
    block.text().replace(/^Hexcells\ level\ v1\n(.+)\n(.*)\n(.*\n.*)\n(([.oOxX\\|\/][.+cn])+\n?)+/gm, function(level, title, author, desc){
      var chk;
      level = level.trim();
      desc = desc.trim();
      container.append(chk = $('<input type="checkbox" checked>'), $('<input type="button" title="Click to copy this level">').prop({
        value: title
      }).click(function(){
        copy(level, this);
      }), $('<span style="font-size: 90%">').text(" by " + author), $('<div>').text(desc));
      levels.push([chk, level]);
    });
    if (container.is(':parent')) {
      block.replaceWith(container);
    }
  });
  if (levels.length > 1) {
    $('<input type="button" value="Copy selected levels" style="float: right; font-size: 150%">').insertBefore(levels[0][0]).click(function(levels){
      return function(){
        var toCopy, res$, i$, ref$, len$, ref1$, chk, level;
        res$ = [];
        for (i$ = 0, len$ = (ref$ = levels).length; i$ < len$; ++i$) {
          ref1$ = ref$[i$], chk = ref1$[0], level = ref1$[1];
          if (chk.prop('checked')) {
            res$.push(level);
          }
        }
        toCopy = res$;
        copy(join$.call(toCopy, '\n\n'), this);
      };
    }(
    levels));
  } else {
    for (i$ = 0, len$ = levels.length; i$ < len$; ++i$) {
      ref$ = levels[i$], chk = ref$[0], level = ref$[1];
      chk.remove();
    }
  }
});
copy = function(s, el){
  GM_setClipboard(s);
  el.style.transition = 'background-color 0.5s ease';
  el.style.backgroundColor = '#3e3';
  return setTimeout(function(){
    el.style.backgroundColor = null;
  }, 500);
};
